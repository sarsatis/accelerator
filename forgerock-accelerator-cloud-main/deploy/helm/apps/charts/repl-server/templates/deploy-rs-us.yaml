# ========================================================================
# MIDSHIPS
# COPYRIGHT 2023

# Legal Notice:
# Installation and use of this script is subject to a license agreement
# with Midships Limited (a company registered in England, under company
# registration number: 11324587). This script cannot be modified or
# shared with another organisation unless approved in writing by Midships
# Limited. You as a user of this script must review, accept and comply
# with the license terms of each downloaded/installed package that is
# referenced by this script. By proceeding with the installation, you are
# accepting the license terms of each package, and acknowledging that your
# use of each package will be subject to its respective license terms.
# For more information visit www.midships.io

# NOTE:
# Don't check this file into source control with any sensitive hard
# coded values.
# ========================================================================
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ tpl .Values.replserver.us.podName . }}"
  namespace: "{{ .Values.global.namespace }}"
spec:
  serviceName: "{{ tpl .Values.replserver.us.serviceName . }}"
  {{- if hasPrefix "dev" (lower .Values.global.envType) }}
  replicas: 1
  {{- else }}
  replicas: {{ .Values.replserver.us.replicas }}
  {{- end }}
  podManagementPolicy: "{{ .Values.global.podManagementPolicy | default "OrderedReady" }}"
  selector:
    matchLabels:
      app: "{{ tpl .Values.replserver.us.podName . }}"
  template:
    metadata:
      labels:
        app: "{{ tpl .Values.replserver.us.podName . }}"
        deploymentTime: "{{ now | date "20060102T150405" }}"
    spec:
      hostAliases:
        {{- if and (and .Values.replserver.aps .Values.replserver.us.hostAliases_ip1) (.Values.replserver.us.hostAliases_hostname1) }}
        - ip: {{ .Values.replserver.us.hostAliases_ip1 }}
          hostnames:
          - {{ tpl .Values.replserver.us.hostAliases_hostname1 . }}
        {{- end }}
        {{- if and (and .Values.replserver.aps .Values.replserver.us.hostAliases_ip2) (.Values.replserver.us.hostAliases_hostname2) }}
        - ip: {{ .Values.replserver.us.hostAliases_ip2 }}
          hostnames:
          - {{ tpl .Values.replserver.us.hostAliases_hostname2 . }}
        {{- end }}
        {{- if and (and .Values.replserver.aps .Values.replserver.us.hostAliases_ip3) (.Values.replserver.us.hostAliases_hostname3) }}
        - ip: {{ .Values.replserver.us.hostAliases_ip3 }}
          hostnames:
          - {{ tpl .Values.replserver.us.hostAliases_hostname3 . }}
        {{- end }}
        {{- if and (and .Values.userstore .Values.userstore.hostAliases_ip1) (.Values.userstore.hostAliases_hostname1) }}
        - ip: "{{ .Values.userstore.hostAliases_ip1 }}"
          hostnames:
          - {{ tpl .Values.userstore.hostAliases_hostname1 . }}
        {{- end }}
        {{- if and (and .Values.userstore .Values.userstore.hostAliases_ip2) (.Values.userstore.hostAliases_hostname2) }}
        - ip: "{{ .Values.userstore.hostAliases_ip2 }}"
          hostnames:
          - {{ tpl .Values.userstore.hostAliases_hostname2 . }}
        {{- end }}
        {{- if and (and .Values.userstore .Values.userstore.hostAliases_ip3) (.Values.userstore.hostAliases_hostname3) }}
        - ip: "{{ .Values.userstore.hostAliases_ip3 }}"
          hostnames:
          - {{ tpl .Values.userstore.hostAliases_hostname3 . }}
        {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - "{{ tpl .Values.replserver.us.podName . }}"
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        runAsUser: 10002
        runAsGroup: 10002
        fsGroup: 10002
      volumes:
        - name: pvc
          persistentVolumeClaim:
            claimName: pvc
      containers:
      - name: "{{ tpl .Values.replserver.us.podName . }}"
        image: "{{ tpl .Values.replserver.image . }}"
        imagePullPolicy: "{{ .Values.global.imgPullPolicy | default "Always" }}"
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
          - mountPath: "/opt/ds/app"
            name: pvc
        resources:
          requests:
            cpu: {{ .Values.global.rs.cpu | default "1000m" | quote }}
            memory: {{ .Values.global.rs.memory | default "2Gi" | quote }}
          limits:
            cpu: {{ .Values.global.rs.cpu | default "1000m" | quote }}
            memory: {{ .Values.global.rs.memory | default "2Gi" | quote }}
        startupProbe:
          exec:
            command:
            - cat
            - /opt/ds/ds_setup_done # DO NOT CHANGE
          initialDelaySeconds: 60 # how long to wait before 1st check
          failureThreshold: 120 # how many failures to accept before failing
          periodSeconds: 10 # how long to wait for a response
        livenessProbe:
          httpGet:
            port: {{ tpl .Values.replserver.us.portHttps . }}
            path: /alive
            scheme: HTTPS
          initialDelaySeconds: 10 # how long to wait before 1st check
          successThreshold: 1 # how many successes to hit before accepting
          failureThreshold: 6 # how many failures to accept before failing
          periodSeconds: 10 # how long to wait between checks
          timeoutSeconds: 5 # how long to wait for a response
        readinessProbe:
          httpGet:
            port: {{ tpl .Values.replserver.us.portHttps . }}
            path: /alive
            scheme: HTTPS
          initialDelaySeconds: 5 # Do NOT set less than 420. how long to wait before checking
          periodSeconds: 10 # how long to wait between checks
          successThreshold: 1 # how many successes to hit before accepting
          failureThreshold: 6 # how many failures to accept before failing
          timeoutSeconds: 5 # how long to wait for a response
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.replserver.us.secretName . }}"
          - configMapRef:
              name: "{{ tpl .Values.replserver.us.configmapName . }}"
        env:
          - name: REPLICAS
            value: "{{ .Values.replserver.us.replicas | default 1 }}"
          - name: SECRET_CERTIFICATE_US
            valueFrom:
              secretKeyRef:
                name: "{{ tpl .Values.userstore.secretName . }}"
                key: SECRET_CERTIFICATE
          - name: SECRET_CERTIFICATE_TS
            valueFrom:
              secretKeyRef:
                name: "{{ tpl .Values.tokenstore.secretName . }}"
                key: SECRET_CERTIFICATE
          - name: SECRET_CERTIFICATE_APS
            valueFrom:
              secretKeyRef:
                name: "{{ tpl .Values.aps.secretName . }}"
                key: SECRET_CERTIFICATE
        ports:
          - name: ldap
            containerPort: {{ tpl .Values.replserver.us.portLdap . }}
            protocol: TCP
          - name: ldaps
            containerPort: {{ tpl .Values.replserver.us.portLdaps . }}
            protocol: TCP
          - name: admin
            containerPort: {{ tpl .Values.replserver.us.portAdmin . }}
            protocol: TCP
          - name: replication
            containerPort: {{ tpl .Values.replserver.us.port_replication . }}
            protocol: TCP
          - name: http
            containerPort: {{ tpl .Values.replserver.us.portHttp . }}
            protocol: TCP
          - name: https
            containerPort: {{ tpl .Values.replserver.us.portHttps . }}
            protocol: TCP
      {{- if .Values.global.imgPullSecrets }}
      imagePullSecrets:
      - name: "{{ .Values.global.imgPullSecrets }}"
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: pvc
        annotations:
          pv.beta.kubernetes.io/gid: "0"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ .Values.replserver.us.pvcSize }}"